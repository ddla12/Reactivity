(()=>{"use strict";const e=(e,t,a,r,s)=>{if(t.middlewares)try{return!t.middlewares[e]||Object.values(t.middlewares[e]).every((e=>e(a,r,s)))}catch(e){console.error(e)}};function t(e,t){"function"==typeof t[e]?t[e](t.data):Object.values(t[e]).forEach((e=>e(t.data)))}Object.defineProperty(window,"Reactivity",{value:class{constructor(e){({beforeUpdating:this.beforeUpdating,updated:this.updated,middlewares:this.middlewares}=e),this.data=this.makeDataReactive(e.data),this.types=this.getTypeOfData(e.data),Object.seal(this)}makeDataReactive(a){return Object.values(a).some((e=>{if(void 0===e.type)return console.warn(`Data '${e}' doesn't have a 'type' property, you should give it one`),!1})),function(a){return new Proxy(a.data,{get:(t,r,s)=>{if(!e("getters",a,t,r,s))throw Error("Some of your middlewares didn't passed");return Reflect.get(t,r)},set:(r,s,d)=>{if(!e("setters",a,r,s,d))throw Error("Some of your middlewares didn't passed");return t("beforeUpdating",a),Reflect.set(r,s,d),t("updated",a),!0}})}({data:Object.entries(a).reduce(((e,[t,a])=>({...e,[t]:a.value})),{}),beforeUpdating:()=>{this.beforeUpdating&&t("beforeUpdating",this)},updated:()=>{this.updated&&t("updated",this)},middlewares:{setters:{type:(e,t,a)=>this.types[t].name===a.constructor.name||(console.warn(`Should not assign type ${a.constructor.name} to type ${this.types[t].name}`),!1),...this.middlewares?.setters},getters:this.middlewares?.getters}})}getTypeOfData(e){return Object.entries(e).reduce(((e,[t,a])=>({...e,[t]:a.type})),{})}}})})();